# coding: utf-8

import requests
import argparse


def parse_arguments():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(description="检测CVE-2018-2894 WebLogic任意文件上传漏洞")
    parser.add_argument('-u', '--url', help='请输入目标URL')
    parser.add_argument('-f', '--urls', help='请输入文件路径')
    parser.add_argument('-o', '--output', help='保存结果到指定路径的文件')
    args = parser.parse_args()
    return args


def print_banner():
    """打印程序banner"""
    print("""  
  _______      ________    ___   ___  __  ___      ___   ___   ___  _  _     
 / ____\ \    / /  ____|  |__ \ / _ \/_ |/ _ \    |__ \ / _ \ / _ \| || |    
| |     \ \  / /| |__ ______ ) | | | || | (_) |_____ ) | (_) | (_) | || |_   
| |      \ \/ / |  __|______/ /| | | || |> _ <______/ / > _ < \__, |__   _|  
| |____   \  /  | |____    / /_| |_| || | (_) |    / /_| (_) |  / /   | |    
 \_____|   \/   |______|  |____|\___/ |_|\___/    |____|\___/  /_/    |_|                                                                        
 """)


def read_target_urls(urls_path):
    urls = []
    try:
        with open(urls_path, 'r') as file:
            for line in file:
                url = line.strip()
                if url:
                    urls.append(url)
    except FileNotFoundError:
        print(f"File not found:{urls_path}")
    return urls


def check_vulnerability(urls):
    """检查WebLogic的CVE-2018-2894漏洞"""
    results = []
    for url in urls:
        target_url = url + '/ws_utc/resources/setting/options/general'
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36'
        }
        response = requests.get(target_url, headers=headers, timeout=5, verify=False, allow_redirects=False)
        if "<name>BasicConfigOptions.workDir</name>" in response.text:
            result = f"[+] {url} 存在 CVE-2018-2894 WebLogic任意文件上传漏洞"
        else:
            result = f"[-] {url} 不存在 CVE-2018-2894 WebLogic任意文件上传漏洞"
        results.append(result)

    return results


def save_results(results, output_file):
    """保存结果到指定文件"""
    with open(output_file, 'w') as file:
        for result in results:
            file.write(result + '\n')


def main():
    """主函数"""
    args = parse_arguments()
    print_banner()
    if args.url:
        results = check_vulnerability([args.url])
        for result in results:
            print(result)
        if args.output:
            save_results(results, args.output)
    elif args.urls:
        urls = read_target_urls(args.urls)
        results = check_vulnerability(urls)
        for result in results:
            print(result)
        if args.output:
            save_results(results, args.output)


if __name__ == '__main__':
    main()
